---
# Source: cilium/templates/cilium-agent/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium"
  namespace: kube-system
---
# Source: cilium/templates/cilium-envoy/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-envoy"
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "cilium-operator"
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-relay"
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: "hubble-ui"
  namespace: kube-system
---
# Source: cilium/templates/cilium-ca-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: cilium-ca
  namespace: kube-system
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx4MDdRc1lweVFUR21aM0JXbTNXd1l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURnd01UQTVOVEV4TWxvWERUSTNNRGd3TVRBNQpOVEV4TWxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFya3B4SFg2bmlZcjZYL1JHRXFCaktQN21reWZCTVpnNmZTaGdrQVVhTWVkSDlXMkkKSkhkV2kyVmpHYkJYbjU4SVhHVlorOEhXMjR6MTNNZUxwb2tNTktpdmNJK2NEY3A5ZTVMelJkNzF1L3VuSFJ0egpzQ3dJNXhFOEE2eDMrVEMvcHpWYUZRMkswZGtkZWw0KzRGRVd6bVNnQ0k5a3ZRd3U0bU1EenNNWldEQUx4VWN4Ck5oK3VUWm15dzZJYm1FZTRkSnZQcmlZUTI1T1hNMjBKeVRRSXc5VjA3M0tpUXVMNGpPcmtjOWRvSXRDU3ZidVMKSWh1Mzh5cEs2OTlMVFhxVFlvd09lSFFsaitINUlOcVp5c2JpWEJZTHpsTzVQSUlXcHBmaE0vcGp5SENXdDJTKwpLVFp3L2xJMnpLeUdTckJUK05kUGl3b1FqNzUwek5mMEdzQlBKd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRXo2bVduRllBNWhBd3JZMytPSDlMV1RJSHh3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQm03OWx3QVB1NHZJVkNSUDI1SlVVQ2c5Yjc2UU1pNUtzVzhGSnJxalJNNXVic2NtNFVBRFNiCjh1YkplKys1d1RhWVJ1WXdTcldNOHp6am9hVHNZOEY3dlpkZ2JTV0xWNThYSHRvbkJnV09LdVcrODhPRDN4TGsKRGZvby82Z3ZOTDQ1bEpiR08zcy9LWmk1TXVyNU10REYrbTAvZU1ycE04dGJUTXEvcjJBWkRqMFIrcis2bm9HTQpWVm1nT0Nsa3JSY0ZoeExjbmY1d0Nkd3ZHNlZwTzZNS1ppU1ZmM3V1dzBaNDVvWEdZaEd6UlNTSUR3Nk5mRmxmCkI3SHd5TFN4Z2NFVHVLdTE0OGllalIydW5ZUFhiNDlmNElMZEdiUkFYYjJhcDFvUUFWTjBXaXRRTmxTdXpLNkwKY0hOeCswR0xUQzdrV3I5U29hTlNHODBFTEJZMTRjclkKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  ca.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBcmtweEhYNm5pWXI2WC9SR0VxQmpLUDdta3lmQk1aZzZmU2hna0FVYU1lZEg5VzJJCkpIZFdpMlZqR2JCWG41OElYR1ZaKzhIVzI0ejEzTWVMcG9rTU5LaXZjSStjRGNwOWU1THpSZDcxdS91bkhSdHoKc0N3STV4RThBNngzK1RDL3B6VmFGUTJLMGRrZGVsNCs0RkVXem1TZ0NJOWt2UXd1NG1NRHpzTVpXREFMeFVjeApOaCt1VFpteXc2SWJtRWU0ZEp2UHJpWVEyNU9YTTIwSnlUUUl3OVYwNzNLaVF1TDRqT3JrYzlkb0l0Q1N2YnVTCklodTM4eXBLNjk5TFRYcVRZb3dPZUhRbGorSDVJTnFaeXNiaVhCWUx6bE81UElJV3BwZmhNL3BqeUhDV3QyUysKS1Rady9sSTJ6S3lHU3JCVCtOZFBpd29Rajc1MHpOZjBHc0JQSndJREFRQUJBb0lCQVFDWUxYdFNhM0hSRUQzSQpaanFBclBXbnA5aWZDQWtSU245WEpGZ2JwN2pWZGNGSXM1ZzVidEZyNk54OFk1SStWdGN3QlhacDhUZXVmd2QwCisrNGRQSEFoMGw5TWdyZVkrd0pSVVYrRDFFYnZHYTB5SnZQK0VKUzlYRGp3WkRoa3BZSFJkeTN1VCtLemswUy8Kd1daWTZiUm1CVW9ONzFYZ0VyRWxEWnNYZnhXei90NWxtdFYyeWdBalNuczRDeURLY1drR2VqQzI0UExqM1lIcwo4Ung4c2xUWVZvZytXekh4VzQ3R0tNS3dhamQvZkowalhCUHJrTXFjK0kwR1NKeE0vbFZXZTRhYlNVK045azk2CmNXS3ZsaEY1YjZUOGk2bFpyUG1lSFhXZFNtWWk0K01XQ1BGNEs4Qitrc2FlWG8vbEJsQ0wyVnZ3ZWtzOUJWYysKTDB5dXJiNmhBb0dCQU5rdkhWSjA1NEZvRjV2RUpUdkJoQ1dHUU14OUllK3NrejdMSzNMRm5VSEFBSDNyMkZscgprdjRmdnMvb3hCK2t1T2ZQMEptR0ZBTUpkaWl2SU9rc280VnRxdzd2TmhSeUp4dlNiM1hMS25YbndBK3pvQmpoCm5WdmhWQ0I5SWxNeklCN0xRT1ZJaU42T2lxMFZ2V1RhUTlUL0FVcFFkUmppMGFIR2hRSE80Qzh2QW9HQkFNMXcKMGRhNi9vb3BIUTlqNHlqaFVqeXE3Z3NOTjkvcWhnWUdUVmMxb1JpV1dneU1CNFA5d09vU1RXZ0Nuc2trZitMNgpNRU8rZ0lhQy9TVnYwWG1Tb2dWRHlMTlg5WnI1cFJSZDFOVnFqdlBuMFZFVU1hQ0hMSG1Dd3Q5bXMwSERNcE1ZCnZtUjVKaE5PdlR2aUY1S1hxc1gwNFNTcjVMTnRHN0RSODRRdjdpR0pBb0dBS1cvcjBFZXR3K3J3VmkvZVNzQnAKVGgrSFRYeXlkT0FnVitLN3IzSTB4czZ6U1ZNdVBDRmlNa29zUmM3TFhKNDVDVUdGTTBWNW0vcTZLSmtCVm52RgoxemROWTlRUUpXYUNQN1N1djNLNzd6TUFXZjZUbFN1MnNra1RtLzlFQlV2RDNSdzZqWVNCV0xVcGtFeU5qaWgyCnVMVE9zamNYb0YvbVQwOXBJU2N2YnRFQ2dZQTJnQm1LNTZ5akpta0pMaXlUS2NOUlNOOUJtMDRaWHZRVElSVGYKYitDK3p4UXdnKzF5Zkp6eSs4d0JMY0RHQjZMTnFpV25zeUFSanlwdEJnOENPMzR6KzFtQkNuS2puRnJJM21PYQpBbHpPSTgrSnZOdTFoR2F1RFp4NCs1dk9kR1EwVmJvY21XOGFiQ2NUZmRWWEZGay9qc2t6bTA1ZXN6RkhaVXMrCjVDQStVUUtCZ0ZXaVNFWjYxTTRyNWNCcFNUL2ovaTZZcFd0NTZtQlBTNkp0UmVVeUphWkJlOVVPaHJFbUVEbzEKSkYrSkdaZzJQSDlaVmVMK3g3WVh5bGMzc1hySHJRK2JTSjBQUEdNendBYVA4VUNVaml5bFNUQzZmcjdYTlFLdQpKZW1DVUMyZ2Noa1F3b1BoSWU3UlVzNXozbTEwdXRlU1lHdUZvRTdVZTJVLytlVEJ4ajFLCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/relay-client-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx4MDdRc1lweVFUR21aM0JXbTNXd1l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURnd01UQTVOVEV4TWxvWERUSTNNRGd3TVRBNQpOVEV4TWxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFya3B4SFg2bmlZcjZYL1JHRXFCaktQN21reWZCTVpnNmZTaGdrQVVhTWVkSDlXMkkKSkhkV2kyVmpHYkJYbjU4SVhHVlorOEhXMjR6MTNNZUxwb2tNTktpdmNJK2NEY3A5ZTVMelJkNzF1L3VuSFJ0egpzQ3dJNXhFOEE2eDMrVEMvcHpWYUZRMkswZGtkZWw0KzRGRVd6bVNnQ0k5a3ZRd3U0bU1EenNNWldEQUx4VWN4Ck5oK3VUWm15dzZJYm1FZTRkSnZQcmlZUTI1T1hNMjBKeVRRSXc5VjA3M0tpUXVMNGpPcmtjOWRvSXRDU3ZidVMKSWh1Mzh5cEs2OTlMVFhxVFlvd09lSFFsaitINUlOcVp5c2JpWEJZTHpsTzVQSUlXcHBmaE0vcGp5SENXdDJTKwpLVFp3L2xJMnpLeUdTckJUK05kUGl3b1FqNzUwek5mMEdzQlBKd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRXo2bVduRllBNWhBd3JZMytPSDlMV1RJSHh3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQm03OWx3QVB1NHZJVkNSUDI1SlVVQ2c5Yjc2UU1pNUtzVzhGSnJxalJNNXVic2NtNFVBRFNiCjh1YkplKys1d1RhWVJ1WXdTcldNOHp6am9hVHNZOEY3dlpkZ2JTV0xWNThYSHRvbkJnV09LdVcrODhPRDN4TGsKRGZvby82Z3ZOTDQ1bEpiR08zcy9LWmk1TXVyNU10REYrbTAvZU1ycE04dGJUTXEvcjJBWkRqMFIrcis2bm9HTQpWVm1nT0Nsa3JSY0ZoeExjbmY1d0Nkd3ZHNlZwTzZNS1ppU1ZmM3V1dzBaNDVvWEdZaEd6UlNTSUR3Nk5mRmxmCkI3SHd5TFN4Z2NFVHVLdTE0OGllalIydW5ZUFhiNDlmNElMZEdiUkFYYjJhcDFvUUFWTjBXaXRRTmxTdXpLNkwKY0hOeCswR0xUQzdrV3I5U29hTlNHODBFTEJZMTRjclkKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURTVENDQWpHZ0F3SUJBZ0lSQUtScHJXN0RoMkhhYkJraFdNUXFCeXd3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURnd01UQTVOVEV4TTFvWERUSTNNRGd3TVRBNQpOVEV4TTFvd0l6RWhNQjhHQTFVRUF3d1lLaTVvZFdKaWJHVXRjbVZzWVhrdVkybHNhWFZ0TG1sdk1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXJTcUJZY0RlUzNhbGp1d0l3WFFjdWJ5SnpmUUQKTTJjZm9OcnJJczhHenVFbWVzNGErQWw2TENHNStkS0FmYnNxMzh1NGVlK0V1SXN4Qld5blRoWC91bEsyd2djNQpVbGdYMS9Salkxb0dNbzcxQ0hnZEVHWERUVmxuMDIzb29TQW45WVVTT0FrbkpjYjZPNFgzU1JuM1l3WC9RcEZaClFpQ3RmaGQ5RVJ6Q0NMNURhYTgxMG9LZXNaR3hPY1VwNGRPUDFtWnBsVnhuakxnNXpRdVFWeFMzOW82Y0JxU1QKTStBenR4cUVRUGZoZ0ZNTXgxSURBMjQ2Z3VxVVVncUpERDBEYk4xOUR4bzdFVzE4QUIySy9JMGFDa1hDUVhZYwphQlZ2Mms1RmlCVm1BMFpDNy9IVURBQ3crNk5NVWR2Vi9BL294Q2dnWU43bjd5TUtOb1ZYSFRMdnd3SURBUUFCCm80R0dNSUdETUE0R0ExVWREd0VCL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUIKQlFVSEF3SXdEQVlEVlIwVEFRSC9CQUl3QURBZkJnTlZIU01FR0RBV2dCUk0rcGxweFdBT1lRTUsyTi9qaC9TMQpreUI4Y0RBakJnTlZIUkVFSERBYWdoZ3FMbWgxWW1Kc1pTMXlaV3hoZVM1amFXeHBkVzB1YVc4d0RRWUpLb1pJCmh2Y05BUUVMQlFBRGdnRUJBQjhacUt2bHdPTUt6OXI1MjlHUnovRFp5aUxScUIwZG1VVVdKRThMZXB6ZmdRYTgKb2U2MHBuSjV5eW9tVmFqdlpvQ25VQmxzdGFCZm82RWh3Q0UvR1VES3hUa1NpR0lXU29SakE3aldQWHppZk1DOAppZDY3cDZxSWNXUWNwTFFPaGE5MDJvYVl3SXNUZjg3VDJFUU9NZ3B3T2NTRmIrR210bHMwV1FGb1E5S01xVU9yCnZRU2JWS3VKV2pkS2drdFVDVGVPdm5LbCtsWnFjWjh1aHVuVnhxQS9URXpvcVMvenJxTm8zN0VVenpCaDJzMngKcFB0M2Q3a1h6eXlia2h1dkR4aTlDeGc3R0JvSzRUNUR2S01vbGN0eXQ3K3RWQ3lPcU5RVS9DcmpHQXJwM2xsTgoySlpmcXdaVzNmQUV3VXRqMHoxZHdwSDBsdW5JU3EwMGhRMGxzbHM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBclNxQlljRGVTM2FsanV3SXdYUWN1YnlKemZRRE0yY2ZvTnJySXM4R3p1RW1lczRhCitBbDZMQ0c1K2RLQWZic3EzOHU0ZWUrRXVJc3hCV3luVGhYL3VsSzJ3Z2M1VWxnWDEvUmpZMW9HTW83MUNIZ2QKRUdYRFRWbG4wMjNvb1NBbjlZVVNPQWtuSmNiNk80WDNTUm4zWXdYL1FwRlpRaUN0ZmhkOUVSekNDTDVEYWE4MQowb0tlc1pHeE9jVXA0ZE9QMW1acGxWeG5qTGc1elF1UVZ4UzM5bzZjQnFTVE0rQXp0eHFFUVBmaGdGTU14MUlECkEyNDZndXFVVWdxSkREMERiTjE5RHhvN0VXMThBQjJLL0kwYUNrWENRWFljYUJWdjJrNUZpQlZtQTBaQzcvSFUKREFDdys2Tk1VZHZWL0Evb3hDZ2dZTjduN3lNS05vVlhIVEx2d3dJREFRQUJBb0lCQUdjVWVsZ2FXemxJczF6VQpuSkdyOEwyUHdlaGJiTnhZY3JkcUdiWnF6bjZ3QUJ2eVBKT1I4S3Y4bDV4aTlpSGlISytEc1pqRVA1a3JJazg4ClVvdGxCUW1BMjFHOHd4NkZXZ3d2YWtwbCtISjRMdHlQdzUxVE5tTUE2WkV1UitCQ0tBYzY0NUYvd1ZIM2xGV0MKZGFXS1UzMGF3TXg3Z1VxZjhTYXlETHozQlhuMTdUdktZQktFTENlZWYxZVpXNzAwL0JIbUM2THJ2TSthcStNTwp1TXhKSExxeXROSGZqay80UWtCcTdBa2Vvd0x0Vmh5RXdUYWdtTE9ZVyt0bjlXY1hBYkppbUhnK1dGS29pVkp2Ck95TitSWExDbXdZSTVjeS8yV1lGSzFsRlpheERacnRzK0txSUx6alBkZWRnR0JDN3J6Qi8rRzR2cWRXcHo4NUsKQ2Q3c1M4RUNnWUVBNEJCNjloZ1MwWGY1RGcwTzQ1bDgrYzM2RjFndERWQlhPazJnZENyUWtlUHdQYnlFUWxCYwpnZDJna2E4MStYLzRCQlFkd21rOHovbHpWRitDV214OGdNN2tyUEpFNTduWmxGNTN3ajRQZDkvbEx1SFg3cmlyCkNnSnMwR3lUSVo5SkV1N2xpWGVQZmZodDE3MkxjNDB2Wi81YlVVWHFLbi9hWXBVMzYwVXpwWmtDZ1lFQXhkamcKNlZBYVpmY2s4UW9xSTVkNDRsN1JtbjZNSkdEcmc0cXdKT1RVK3ZsbHptc3JvTGFJdnY3WXBnZHBROGdUcnllZgpkeWFCTnlyd1NMZERsd1VZR0lNZU1yV0FXeUdiQktzNWY5eGcyKzVzK3J3NDkwbXhSODJNV2ZOZXlVMGVvbTJqCnFqU3V4QzkvbHRDWDQzMmhVdU90R0V3NU9NUlVxcm9LNFhUS1lic0NnWUVBMHM4dW9UTnRJUjliZDlqWlZWSW4KdjNBSUNNYXhQSUdHVUJpUkNqcnVHUlQ0QjEzQ29oR3h0NDJwY09nRVJFWWVOdGdtVjY5anc5alNwV05tNVdTRQpqendZOG83T1BhY2lDdklHZ3Y2WTF4UVVNTlBUc1lxVmdjbGVUNHFYczE2R0JnWTJkK3ZCV2FmTzBOaEl4K0xoCjQxbncyTHFLNG9tQUVwaUtFQlQvenFFQ2dZQVNKWGxEalFoT3orTkFoSGttK0k2cTNKMkcrUkpyaDhReU5YZEEKZXdpWjJHUWhFYTFYdVVaRGxtWlNuQjFvalNKWkQxNU45R2Nub3pXVXhkSmFPS3BrSFNxWTVoTFd5UGRKNzFaLwp4cnZQa0VmSW01angvWDFZSTU4NjVOcU54aGdJTjl3cUVWanlQNVVKUlNxWlAvMmE5Nno1ckl3WEM5TGtNZG9yCm9hV3FYd0tCZ0d4LzI4K0tSelNiWnlSRUJGNTIyQUphaXhmbkxDYnh5bXJqM3duUUhObG9IYS9uZjZyQ3lYdVQKbVZWaGZodUFDOHp0ZGtxaFNFSG1Ra2VWL0JHL3RNZTNKZjV5Y3pVTFZqUzlISVlmU21SZW1ZUmNkenZrSXZlVgpCbGlRdjdxd0dnR2ZFbjB2enBhLzExWWsyR2laMnh5OE9EQ1JwNnpacTh1MUU4RnhERUxOCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble/tls-helm/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  ca.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURGRENDQWZ5Z0F3SUJBZ0lSQUx4MDdRc1lweVFUR21aM0JXbTNXd1l3RFFZSktvWklodmNOQVFFTEJRQXcKRkRFU01CQUdBMVVFQXhNSlEybHNhWFZ0SUVOQk1CNFhEVEkwTURnd01UQTVOVEV4TWxvWERUSTNNRGd3TVRBNQpOVEV4TWxvd0ZERVNNQkFHQTFVRUF4TUpRMmxzYVhWdElFTkJNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DCkFROEFNSUlCQ2dLQ0FRRUFya3B4SFg2bmlZcjZYL1JHRXFCaktQN21reWZCTVpnNmZTaGdrQVVhTWVkSDlXMkkKSkhkV2kyVmpHYkJYbjU4SVhHVlorOEhXMjR6MTNNZUxwb2tNTktpdmNJK2NEY3A5ZTVMelJkNzF1L3VuSFJ0egpzQ3dJNXhFOEE2eDMrVEMvcHpWYUZRMkswZGtkZWw0KzRGRVd6bVNnQ0k5a3ZRd3U0bU1EenNNWldEQUx4VWN4Ck5oK3VUWm15dzZJYm1FZTRkSnZQcmlZUTI1T1hNMjBKeVRRSXc5VjA3M0tpUXVMNGpPcmtjOWRvSXRDU3ZidVMKSWh1Mzh5cEs2OTlMVFhxVFlvd09lSFFsaitINUlOcVp5c2JpWEJZTHpsTzVQSUlXcHBmaE0vcGp5SENXdDJTKwpLVFp3L2xJMnpLeUdTckJUK05kUGl3b1FqNzUwek5mMEdzQlBKd0lEQVFBQm8yRXdYekFPQmdOVkhROEJBZjhFCkJBTUNBcVF3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdFR0NDc0dBUVVGQndNQ01BOEdBMVVkRXdFQi93UUYKTUFNQkFmOHdIUVlEVlIwT0JCWUVGRXo2bVduRllBNWhBd3JZMytPSDlMV1RJSHh3TUEwR0NTcUdTSWIzRFFFQgpDd1VBQTRJQkFRQm03OWx3QVB1NHZJVkNSUDI1SlVVQ2c5Yjc2UU1pNUtzVzhGSnJxalJNNXVic2NtNFVBRFNiCjh1YkplKys1d1RhWVJ1WXdTcldNOHp6am9hVHNZOEY3dlpkZ2JTV0xWNThYSHRvbkJnV09LdVcrODhPRDN4TGsKRGZvby82Z3ZOTDQ1bEpiR08zcy9LWmk1TXVyNU10REYrbTAvZU1ycE04dGJUTXEvcjJBWkRqMFIrcis2bm9HTQpWVm1nT0Nsa3JSY0ZoeExjbmY1d0Nkd3ZHNlZwTzZNS1ppU1ZmM3V1dzBaNDVvWEdZaEd6UlNTSUR3Nk5mRmxmCkI3SHd5TFN4Z2NFVHVLdTE0OGllalIydW5ZUFhiNDlmNElMZEdiUkFYYjJhcDFvUUFWTjBXaXRRTmxTdXpLNkwKY0hOeCswR0xUQzdrV3I5U29hTlNHODBFTEJZMTRjclkKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURWakNDQWo2Z0F3SUJBZ0lRQnpHNENaN3dhdVp2Q3Q2RW5KODRXREFOQmdrcWhraUc5dzBCQVFzRkFEQVUKTVJJd0VBWURWUVFERXdsRGFXeHBkVzBnUTBFd0hoY05NalF3T0RBeE1EazFNVEV5V2hjTk1qY3dPREF4TURrMQpNVEV5V2pBcU1TZ3dKZ1lEVlFRRERCOHFMbVJsWm1GMWJIUXVhSFZpWW14bExXZHljR011WTJsc2FYVnRMbWx2Ck1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdEhEYWxXRG14aDk3Q080RWFCVzgKRG5EemdLbzFCVnE0YzlYckowSWR0V09IN2kvdlJuRkwxRFBWY1gzeENHeENxL3VEZnhlRWhyTXExQkNKa3VRaQpkR1NEbzhsUytmNHVYZUkraGl5Q0QyMHlWcmdFWnVpZGdIV2RSNFJsOGFRTWVBb3BPcGZmVHhod0dlSEo4cU9mCnIyZXJlTElhNWRVWEdpWWdjbWpteXN0c2JzN3dPRDd5NTdmbjBKaUZsWXp3cWVSM0VlVk4wbW9PMWNDMWFwVWYKSFcrWEhzVU1RSW56RzJqenZ6VVF0enkzTU9nd0VGL3ZvS093MStLd1I1bzJVdEF3UFFSZSs2TFVMQ21VREt1VApWNXUrbHh6N0NzQXF5STlFODRjY2pNZ3h4UjBLUlBCeW5vVXpHNmtPUUxzM3hJTFY2NFFaK1hkcGs1aml0cTB6CkNRSURBUUFCbzRHTk1JR0tNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0QKQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFIL0JBSXdBREFmQmdOVkhTTUVHREFXZ0JSTStwbHB4V0FPWVFNSwoyTi9qaC9TMWt5QjhjREFxQmdOVkhSRUVJekFoZ2g4cUxtUmxabUYxYkhRdWFIVmlZbXhsTFdkeWNHTXVZMmxzCmFYVnRMbWx2TUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFDbDFpMzFIeGJsaUV2MTVBS3Q5NkhzanZwWXFVVG0KdXNNVkRvbVlWVWhhdlF6VWJVWndyYjBzdkl1aGdyUkdkTnFlQktoUW8vc05Hc3E4Y0RrZlgzV2tmang3THZlcwpzS3ZRTGVPak4xaVRJbExZemN2L3BlYkZZQ3gwcC9hVjZqYjF5ZXBacUh2bWhTczVjODF2empFS3FuazZuaFZtCmVtWWM0UUtUTTUyaDNmT2RDOG1UZ1M3ZkdtNVhnMUVSZ1d6bkpPNHBaZ1NVZ2IrbEcweFplMmM4UzFKdlZOSTcKd1pxS29FN0NpU3V1cG1GSHdRQWo0QkVwd1hSQTZRL3dxMjhsS2lkaWhTVHdyZlpmQ1JGcmQ4YWtkSy9xa0o4dwpkQzQxeG40dExXemxkNWFUTThGck9iNWhKcllYaEp3T2puZHhCanFVNDJjOHVFdUlOa1NzT25KMwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBdEhEYWxXRG14aDk3Q080RWFCVzhEbkR6Z0tvMUJWcTRjOVhySjBJZHRXT0g3aS92ClJuRkwxRFBWY1gzeENHeENxL3VEZnhlRWhyTXExQkNKa3VRaWRHU0RvOGxTK2Y0dVhlSStoaXlDRDIweVZyZ0UKWnVpZGdIV2RSNFJsOGFRTWVBb3BPcGZmVHhod0dlSEo4cU9mcjJlcmVMSWE1ZFVYR2lZZ2Ntam15c3RzYnM3dwpPRDd5NTdmbjBKaUZsWXp3cWVSM0VlVk4wbW9PMWNDMWFwVWZIVytYSHNVTVFJbnpHMmp6dnpVUXR6eTNNT2d3CkVGL3ZvS093MStLd1I1bzJVdEF3UFFSZSs2TFVMQ21VREt1VFY1dStseHo3Q3NBcXlJOUU4NGNjak1neHhSMEsKUlBCeW5vVXpHNmtPUUxzM3hJTFY2NFFaK1hkcGs1aml0cTB6Q1FJREFRQUJBb0lCQUcwWWJwQXlibFVMWTVBYQptSDkxNUtXMmxRTU41ZEMrOFJiWUY3MDh0RW1mUytndkF6UkwrOVRwSWZ2a2NYN3VOY0ZWNkVOSExORmtNbGpWClJ0aVJKbVBKQWU1ZEl0WVRZR1ZURFFxQ2pvQlZQVUpCTUNnb0xGSW15bGtiSzZmVno5UWtFSmxraVplQTV3WS8KQmFLMld5M3FPRHBaTlBvUXhFOEREa3NlTWF3YUhPdXpMVHZ3emVJU0wvRUh4akxDQWxXeC84WUdpRERHRWphdQozaUw5S2R6RkxPd0NEOGJFckxGdUJoUnYxU3ptTTVVVk5wbXBGRXoySStmMEp4dlBiR2pKaWNTcjNuOG9uSmtjCmZJeDhNbVpSRDlIMml3L21raXlubWJTdHNSYURlYmFEUHVjNVNMK2VzT2c0R0FseDBpT3J6TWpoK0pGdDAyUysKNjhZSjg2RUNnWUVBN1BJNFFvdGg5ZnVrNDRHVE9FUVZ2MkpvSy9tZUN5Rk5tUDV5U0tNd3hjcGJ6dFJSM09OYQpuSUVWbDBreG82THAvbDIvRStVc2JxTThjelovTWllaW5LdEE1dXc4L2pISVNtV29lZTV2eTREbEdhbHA0akl1CktZNzB0N0JTdkMyaXVsS1hVY25MOENSelNrS2puNm5DM2hNSUluYTh1YTNrbW5lQlpLUDR0R2NDZ1lFQXd2TnAKNlpXNGZHbWVab3J0SzNLWVNrd092RmFmV0QvVHVCSlRHT0Y0MWp5Wm8wYXU5Z24rWHBNZnJiSDdnZnRKRGJrMQppdU1aKy9hUW9yQkdGdWlSeHhYRVp5WmNLVUloNUY2YjFyYW1kNmhoYlNQVFE4NlZuQURYV0U3K0xDUk1Zbk0yCnd1ZldOSzhOTStjU3crbkNRNGxIOFVzN1B4ZEhIQnJqVm8yVHR3OENnWUJ4alBiWE5STENIbEY3MGNucXFmNCsKRkh2VnJ5OUZLRFdXdjBHbmU4VlExRlJBLzFFbjZUQ3dWZEF5Q3hxbHo5b1JVMzNSbS84NkdqSkxDRy9XYWxZcwpmSW1DNE8ydDU4K1RqN280ak1LNHBOR21CYUUvakVyQkVjaEhDMUhxNm5mVWtPWUJoUktkeCtvVVNYRStmODFxClBYYWxoWCtXQURiUXE3cXZyMER0dXdLQmdIWUFpcXBWOHU1enErcWJ5d1ZTZnZYeDViV0FwVUR3bVlIQXJjWFEKcktqWTA1SnVOWGMrQTFkUnJJb2h3b0FpRDAwY1AxbUxMMjVCQjdsQ0E1cllPVzBOTXUzUTNWWW43b1hoOG1oYgo5SlZYT1dtcmxyUmpkbEdRZk1pNlA4V09UeUlFWlRCQ3puampRSldiRjlPNFNkdEJYR2VreHY3Z1l5MlM1T3ErCkZaeG5Bb0dBUWpid0tPMkp5OXpxbHhZVlRKR3k4cGN0VjBzMlQ3OUFVd1pWZFdTM3Fwd1RJaUtycEV2S3d1REQKeUc3WGJKWjhkUEZaVGRxbDljVld6SC96bGhSN2lOZGdyT1U5QWFtT0N0M0EwVWFrSHlkdnVyL2lGNTZUNXIvLwpPZnRpcE9lS2xwazJXQ3dHS0lYUUg0cTM2UmhTekkxeGFGdkM5dTE5N0w2SnFnSEdhTDA9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:
  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in an etcd kvstore, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  identity-heartbeat-timeout: "30m0s"
  identity-gc-interval: "15m0s"
  cilium-endpoint-gc-interval: "5m0s"
  nodes-gc-interval: "5m0s"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  debug-verbose: ""
  # The agent can be put into the following three policy enforcement modes
  # default, always and never.
  # https://docs.cilium.io/en/latest/security/policy/intro/#policy-enforcement-modes
  enable-policy: "default"
  policy-cidr-match-mode: ""
  # If you want metrics enabled in all of your Cilium agents, set the port for
  # which the Cilium agents will have their metrics exposed.
  # This option deprecates the "prometheus-serve-addr" in the
  # "cilium-metrics-config" ConfigMap
  # NOTE that this will open the port on ALL nodes where Cilium pods are
  # scheduled.
  prometheus-serve-addr: ":9962"
  # A space-separated list of controller groups for which to enable metrics.
  # The special values of "all" and "none" are supported.
  controller-group-metrics: write-cni-file
    sync-host-ips
    sync-lb-maps-with-k8s-services
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":9963"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "false"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: "5s"

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0] of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  bpf-lb-external-clusterip: "false"

  bpf-events-drop-enabled: "true"
  bpf-events-policy-verdict-enabled: "true"
  bpf-events-trace-enabled: "true"

  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: default
  # Unique ID of the cluster. Must be unique across all conneted clusters and
  # in the range of 1 and 255. Only relevant when building a mesh of clusters.
  cluster-id: "0"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  # Default case
  routing-mode: "tunnel"
  tunnel-protocol: "vxlan"
  service-no-backend-response: "reject"

  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  enable-ipv4-masquerade: "true"
  enable-ipv4-big-tcp: "false"
  enable-ipv6-big-tcp: "false"
  enable-ipv6-masquerade: "true"
  enable-tcx: "true"
  datapath-mode: "veth"
  enable-masquerade-to-route-source: "false"

  enable-xt-socket-fallback: "true"
  install-no-conntrack-iptables-rules: "false"

  auto-direct-node-routes: "false"
  direct-routing-skip-unreachable: "false"
  enable-local-redirect-policy: "false"
  enable-runtime-device-detection: "true"

  kube-proxy-replacement: "true"
  kube-proxy-replacement-healthz-bind-address: ""
  bpf-lb-sock: "false"
  bpf-lb-sock-terminate-pod-connections: "false"
  nodeport-addresses: ""
  enable-health-check-nodeport: "true"
  enable-health-check-loadbalancer-ip: "false"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  bpf-lb-acceleration: "disabled"
  enable-svc-source-range-check: "true"
  enable-l2-neigh-discovery: "true"
  arping-refresh-period: "30s"
  k8s-require-ipv4-pod-cidr: "false"
  k8s-require-ipv6-pod-cidr: "false"
  enable-k8s-networkpolicy: "true"
  # Tell the agent to generate and write a CNI configuration file
  write-cni-conf-when-ready: /host/etc/cni/net.d/05-cilium.conflist
  cni-exclusive: "true"
  cni-log-file: "/var/run/cilium/cilium-cni.log"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-node-selector-labels: "false"
  synchronize-k8s-nodes: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path: "/var/run/cilium/hubble.sock"
  # Address to expose Hubble metrics (e.g. ":7070"). Metrics server will be disabled if this
  # field is not set.
  hubble-metrics-server: ":9965"
  hubble-metrics-server-enable-tls: "false"
  # A space separated list of metrics to enable. See [0] for available metrics.
  #
  # https://github.com/cilium/hubble/blob/master/Documentation/metrics.md
  hubble-metrics: dns
    drop
    tcp
    flow
    port-distribution
    icmp
    httpV2:exemplars=true;labelsContext=source_ip,source_namespace,source_workload,destination_ip,destination_namespace,destination_workload,traffic_direction
  enable-hubble-open-metrics: "true"
  hubble-export-file-max-size-mb: "10"
  hubble-export-file-max-backups: "5"
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "kubernetes"
  ipam-cilium-node-update-rate: "15s"
  egress-gateway-reconciliation-trigger-interval: "1s"
  enable-vtep: "false"
  vtep-endpoint: ""
  vtep-cidr: ""
  vtep-mask: ""
  vtep-mac: ""
  procfs: "/host/proc"
  bpf-root: "/sys/fs/bpf"
  cgroup-root: "/sys/fs/cgroup"
  enable-k8s-terminating-endpoint: "true"
  enable-sctp: "false"

  k8s-client-qps: "10"
  k8s-client-burst: "20"
  remove-cilium-node-taints: "true"
  set-cilium-node-taints: "true"
  set-cilium-is-up-condition: "true"
  unmanaged-pod-watcher-interval: "15"
  # default DNS proxy to transparent mode in non-chaining modes
  dnsproxy-enable-transparent-mode: "true"
  dnsproxy-socket-linger-timeout: "10"
  tofqdns-dns-reject-response-code: "refused"
  tofqdns-enable-dns-compression: "true"
  tofqdns-endpoint-max-ip-per-hostname: "50"
  tofqdns-idle-connection-grace-period: "0s"
  tofqdns-max-deferred-connection-deletes: "10000"
  tofqdns-proxy-response-max-delay: "100ms"
  agent-not-ready-taint-key: "node.cilium.io/agent-not-ready"

  mesh-auth-enabled: "true"
  mesh-auth-queue-size: "1024"
  mesh-auth-rotated-identities-queue-size: "1024"
  mesh-auth-gc-interval: "5m0s"

  proxy-xff-num-trusted-hops-ingress: "0"
  proxy-xff-num-trusted-hops-egress: "0"
  proxy-connect-timeout: "2"
  proxy-max-requests-per-connection: "0"
  proxy-max-connection-duration-seconds: "0"
  proxy-idle-timeout-seconds: "60"

  external-envoy-proxy: "true"
  envoy-base-id: "0"

  envoy-keep-cap-netbindservice: "false"
  max-connected-clusters: "255"
  clustermesh-enable-endpoint-sync: "false"
  clustermesh-enable-mcs-api: "false"

# Extra config allows adding arbitrary properties to the cilium config.
# By putting it at the end of the ConfigMap, it's also possible to override existing properties.
---
# Source: cilium/templates/cilium-envoy/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-envoy-config
  namespace: kube-system
data:
  bootstrap-config.json: |
    {
      "node": {
        "id": "host~127.0.0.1~no-id~localdomain",
        "cluster": "ingress-cluster"
      },
      "staticResources": {
        "listeners": [
          {
            "name": "envoy-prometheus-metrics-listener",
            "address": {
              "socket_address": {
                "address": "0.0.0.0",
                "port_value": 9964
              }
            },
            "filter_chains": [
              {
                "filters": [
                  {
                    "name": "envoy.filters.network.http_connection_manager",
                    "typed_config": {
                      "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager",
                      "stat_prefix": "envoy-prometheus-metrics-listener",
                      "route_config": {
                        "virtual_hosts": [
                          {
                            "name": "prometheus_metrics_route",
                            "domains": [
                              "*"
                            ],
                            "routes": [
                              {
                                "name": "prometheus_metrics_route",
                                "match": {
                                  "prefix": "/metrics"
                                },
                                "route": {
                                  "cluster": "/envoy-admin",
                                  "prefix_rewrite": "/stats/prometheus"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      "http_filters": [
                        {
                          "name": "envoy.filters.http.router",
                          "typed_config": {
                            "@type": "type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"
                          }
                        }
                      ],
                      "stream_idle_timeout": "0s"
                    }
                  }
                ]
              }
            ]
          },
          {
            "name": "envoy-health-listener",
            "address": {
              "socket_address": {
                "address": "127.0.0.1",
                "port_value": 9878
              }
            },
            "filter_chains": [
              {
                "filters": [
                  {
                    "name": "envoy.filters.network.http_connection_manager",
                    "typed_config": {
                      "@type": "type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager",
                      "stat_prefix": "envoy-health-listener",
                      "route_config": {
                        "virtual_hosts": [
                          {
                            "name": "health",
                            "domains": [
                              "*"
                            ],
                            "routes": [
                              {
                                "name": "health",
                                "match": {
                                  "prefix": "/healthz"
                                },
                                "route": {
                                  "cluster": "/envoy-admin",
                                  "prefix_rewrite": "/ready"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      "http_filters": [
                        {
                          "name": "envoy.filters.http.router",
                          "typed_config": {
                            "@type": "type.googleapis.com/envoy.extensions.filters.http.router.v3.Router"
                          }
                        }
                      ],
                      "stream_idle_timeout": "0s"
                    }
                  }
                ]
              }
            ]
          }
        ],
        "clusters": [
          {
            "name": "ingress-cluster",
            "type": "ORIGINAL_DST",
            "connectTimeout": "2s",
            "lbPolicy": "CLUSTER_PROVIDED",
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "commonHttpProtocolOptions": {
                  "idleTimeout": "60s",
                  "maxConnectionDuration": "0s",
                  "maxRequestsPerConnection": 0
                },
                "useDownstreamProtocolConfig": {}
              }
            },
            "cleanupInterval": "2.500s"
          },
          {
            "name": "egress-cluster-tls",
            "type": "ORIGINAL_DST",
            "connectTimeout": "2s",
            "lbPolicy": "CLUSTER_PROVIDED",
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "commonHttpProtocolOptions": {
                  "idleTimeout": "60s",
                  "maxConnectionDuration": "0s",
                  "maxRequestsPerConnection": 0
                },
                "upstreamHttpProtocolOptions": {},
                "useDownstreamProtocolConfig": {}
              }
            },
            "cleanupInterval": "2.500s",
            "transportSocket": {
              "name": "cilium.tls_wrapper",
              "typedConfig": {
                "@type": "type.googleapis.com/cilium.UpstreamTlsWrapperContext"
              }
            }
          },
          {
            "name": "egress-cluster",
            "type": "ORIGINAL_DST",
            "connectTimeout": "2s",
            "lbPolicy": "CLUSTER_PROVIDED",
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "commonHttpProtocolOptions": {
                  "idleTimeout": "60s",
                  "maxConnectionDuration": "0s",
                  "maxRequestsPerConnection": 0
                },
                "useDownstreamProtocolConfig": {}
              }
            },
            "cleanupInterval": "2.500s"
          },
          {
            "name": "ingress-cluster-tls",
            "type": "ORIGINAL_DST",
            "connectTimeout": "2s",
            "lbPolicy": "CLUSTER_PROVIDED",
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "commonHttpProtocolOptions": {
                  "idleTimeout": "60s",
                  "maxConnectionDuration": "0s",
                  "maxRequestsPerConnection": 0
                },
                "upstreamHttpProtocolOptions": {},
                "useDownstreamProtocolConfig": {}
              }
            },
            "cleanupInterval": "2.500s",
            "transportSocket": {
              "name": "cilium.tls_wrapper",
              "typedConfig": {
                "@type": "type.googleapis.com/cilium.UpstreamTlsWrapperContext"
              }
            }
          },
          {
            "name": "xds-grpc-cilium",
            "type": "STATIC",
            "connectTimeout": "2s",
            "loadAssignment": {
              "clusterName": "xds-grpc-cilium",
              "endpoints": [
                {
                  "lbEndpoints": [
                    {
                      "endpoint": {
                        "address": {
                          "pipe": {
                            "path": "/var/run/cilium/envoy/sockets/xds.sock"
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            },
            "typedExtensionProtocolOptions": {
              "envoy.extensions.upstreams.http.v3.HttpProtocolOptions": {
                "@type": "type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions",
                "explicitHttpConfig": {
                  "http2ProtocolOptions": {}
                }
              }
            }
          },
          {
            "name": "/envoy-admin",
            "type": "STATIC",
            "connectTimeout": "2s",
            "loadAssignment": {
              "clusterName": "/envoy-admin",
              "endpoints": [
                {
                  "lbEndpoints": [
                    {
                      "endpoint": {
                        "address": {
                          "pipe": {
                            "path": "/var/run/cilium/envoy/sockets/admin.sock"
                          }
                        }
                      }
                    }
                  ]
                }
              ]
            }
          }
        ]
      },
      "dynamicResources": {
        "ldsConfig": {
          "apiConfigSource": {
            "apiType": "GRPC",
            "transportApiVersion": "V3",
            "grpcServices": [
              {
                "envoyGrpc": {
                  "clusterName": "xds-grpc-cilium"
                }
              }
            ],
            "setNodeOnFirstMessageOnly": true
          },
          "resourceApiVersion": "V3"
        },
        "cdsConfig": {
          "apiConfigSource": {
            "apiType": "GRPC",
            "transportApiVersion": "V3",
            "grpcServices": [
              {
                "envoyGrpc": {
                  "clusterName": "xds-grpc-cilium"
                }
              }
            ],
            "setNodeOnFirstMessageOnly": true
          },
          "resourceApiVersion": "V3"
        }
      },
      "bootstrapExtensions": [
        {
          "name": "envoy.bootstrap.internal_listener",
          "typed_config": {
            "@type": "type.googleapis.com/envoy.extensions.bootstrap.internal_listener.v3.InternalListener"
          }
        }
      ],
      "layeredRuntime": {
        "layers": [
          {
            "name": "static_layer_0",
            "staticLayer": {
              "overload": {
                "global_downstream_max_connections": 50000
              }
            }
          }
        ]
      },
      "admin": {
        "address": {
          "pipe": {
            "path": "/var/run/cilium/envoy/sockets/admin.sock"
          }
        }
      }
    }
---
# Source: cilium/templates/hubble-relay/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    cluster-name: default
    peer-service: "hubble-peer.kube-system.svc.cluster.local:443"
    listen-address: :4245
    gops: true
    gops-port: "9893"
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-hubble-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-hubble-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt

    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-nginx
  namespace: kube-system
data:
  nginx.conf: "server {\n    listen       8081;\n    listen       [::]:8081;\n    server_name  localhost;\n    root /app;\n    index index.html;\n    client_max_body_size 1G;\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n\n        # CORS\n        add_header Access-Control-Allow-Methods \"GET, POST, PUT, HEAD, DELETE, OPTIONS\";\n        add_header Access-Control-Allow-Origin *;\n        add_header Access-Control-Max-Age 1728000;\n        add_header Access-Control-Expose-Headers content-length,grpc-status,grpc-message;\n        add_header Access-Control-Allow-Headers range,keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout;\n        if ($request_method = OPTIONS) {\n            return 204;\n        }\n        # /CORS\n\n        location /api {\n            proxy_http_version 1.1;\n            proxy_pass_request_headers on;\n            proxy_hide_header Access-Control-Allow-Origin;\n            proxy_pass http://127.0.0.1:8090;\n        }\n        location / {\n            # double `/index.html` is required here \n            try_files $uri $uri/ /index.html /index.html;\n        }\n\n        # Liveness probe\n        location /healthz {\n            access_log off;\n            add_header Content-Type text/plain;\n            return 200 'ok';\n        }\n    }\n}"
---
# Source: cilium/templates/cilium-agent/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
rules:
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - namespaces
      - services
      - pods
      - endpoints
      - nodes
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - list
      - watch
      # This is used when validating policies in preflight. This will need to stay
      # until we figure out how to avoid "get" inside the preflight, and then
      # should be removed ideally.
      - get
  - apiGroups:
      - cilium.io
    resources:
      - ciliumloadbalancerippools
      - ciliumbgppeeringpolicies
      - ciliumbgpnodeconfigs
      - ciliumbgpadvertisements
      - ciliumbgppeerconfigs
      - ciliumclusterwideenvoyconfigs
      - ciliumclusterwidenetworkpolicies
      - ciliumegressgatewaypolicies
      - ciliumendpoints
      - ciliumendpointslices
      - ciliumenvoyconfigs
      - ciliumidentities
      - ciliumlocalredirectpolicies
      - ciliumnetworkpolicies
      - ciliumnodes
      - ciliumnodeconfigs
      - ciliumcidrgroups
      - ciliuml2announcementpolicies
      - ciliumpodippools
    verbs:
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - ciliumidentities
      - ciliumendpoints
      - ciliumnodes
    verbs:
      - create
  - apiGroups:
      - cilium.io
    # To synchronize garbage collection of such resources
    resources:
      - ciliumidentities
    verbs:
      - update
  - apiGroups:
      - cilium.io
    resources:
      - ciliumendpoints
    verbs:
      - delete
      - get
  - apiGroups:
      - cilium.io
    resources:
      - ciliumnodes
      - ciliumnodes/status
    verbs:
      - get
      - update
  - apiGroups:
      - cilium.io
    resources:
      - ciliumendpoints/status
      - ciliumendpoints
      - ciliuml2announcementpolicies/status
      - ciliumbgpnodeconfigs/status
    verbs:
      - patch
---
# Source: cilium/templates/cilium-operator/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
      # to automatically delete [core|kube]dns pods so that are starting to being
      # managed by Cilium
      - delete
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      # To remove node taints
      - nodes
      # To set NetworkUnavailable false on startup
      - nodes/status
    verbs:
      - patch
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      # to perform LB IP allocation for BGP
      - services/status
    verbs:
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      # to check apiserver connectivity
      - namespaces
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      # to perform the translation of a CNP that contains `ToGroup` to its endpoints
      - services
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - ciliumnetworkpolicies
      - ciliumclusterwidenetworkpolicies
    verbs:
      # Create auto-generated CNPs and CCNPs from Policies that have 'toGroups'
      - create
      - update
      - deletecollection
      # To update the status of the CNPs and CCNPs
      - patch
      - get
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - ciliumnetworkpolicies/status
      - ciliumclusterwidenetworkpolicies/status
    verbs:
      # Update the auto-generated CNPs and CCNPs status.
      - patch
      - update
  - apiGroups:
      - cilium.io
    resources:
      - ciliumendpoints
      - ciliumidentities
    verbs:
      # To perform garbage collection of such resources
      - delete
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - ciliumidentities
    verbs:
      # To synchronize garbage collection of such resources
      - update
  - apiGroups:
      - cilium.io
    resources:
      - ciliumnodes
    verbs:
      - create
      - update
      - get
      - list
      - watch
        # To perform CiliumNode garbage collector
      - delete
  - apiGroups:
      - cilium.io
    resources:
      - ciliumnodes/status
    verbs:
      - update
  - apiGroups:
      - cilium.io
    resources:
      - ciliumendpointslices
      - ciliumenvoyconfigs
      - ciliumbgppeerconfigs
      - ciliumbgpadvertisements
      - ciliumbgpnodeconfigs
    verbs:
      - create
      - update
      - get
      - list
      - watch
      - delete
      - patch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - create
      - get
      - list
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - update
    resourceNames:
      - ciliumloadbalancerippools.cilium.io
      - ciliumbgppeeringpolicies.cilium.io
      - ciliumbgpclusterconfigs.cilium.io
      - ciliumbgppeerconfigs.cilium.io
      - ciliumbgpadvertisements.cilium.io
      - ciliumbgpnodeconfigs.cilium.io
      - ciliumbgpnodeconfigoverrides.cilium.io
      - ciliumclusterwideenvoyconfigs.cilium.io
      - ciliumclusterwidenetworkpolicies.cilium.io
      - ciliumegressgatewaypolicies.cilium.io
      - ciliumendpoints.cilium.io
      - ciliumendpointslices.cilium.io
      - ciliumenvoyconfigs.cilium.io
      - ciliumexternalworkloads.cilium.io
      - ciliumidentities.cilium.io
      - ciliumlocalredirectpolicies.cilium.io
      - ciliumnetworkpolicies.cilium.io
      - ciliumnodes.cilium.io
      - ciliumnodeconfigs.cilium.io
      - ciliumcidrgroups.cilium.io
      - ciliuml2announcementpolicies.cilium.io
      - ciliumpodippools.cilium.io
  - apiGroups:
      - cilium.io
    resources:
      - ciliumloadbalancerippools
      - ciliumpodippools
      - ciliumbgppeeringpolicies
      - ciliumbgpclusterconfigs
      - ciliumbgpnodeconfigoverrides
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - ciliumpodippools
    verbs:
      - create
  - apiGroups:
      - cilium.io
    resources:
      - ciliumloadbalancerippools/status
    verbs:
      - patch
  # For cilium-operator running in HA mode.
  #
  # Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
  # between multiple running instances.
  # The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
  # common and fewer objects in the cluster watch "all Leases".
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
      - get
      - update
---
# Source: cilium/templates/hubble-ui/clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
rules:
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - componentstatuses
      - endpoints
      - namespaces
      - nodes
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - "*"
    verbs:
      - get
      - list
      - watch
---
# Source: cilium/templates/cilium-agent/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/cilium-operator/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
  - kind: ServiceAccount
    name: "cilium-operator"
    namespace: kube-system
---
# Source: cilium/templates/hubble-ui/clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
  - kind: ServiceAccount
    name: "hubble-ui"
    namespace: kube-system
---
# Source: cilium/templates/cilium-agent/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
      - list
      - watch
---
# Source: cilium/templates/cilium-agent/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cilium-config-agent
  namespace: kube-system
  labels:
    app.kubernetes.io/part-of: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cilium-config-agent
subjects:
  - kind: ServiceAccount
    name: "cilium"
    namespace: kube-system
---
# Source: cilium/templates/hubble-relay/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  annotations:
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-relay
  ports:
    - protocol: TCP
      port: 80
      targetPort: grpc
---
# Source: cilium/templates/hubble-ui/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  type: "ClusterIP"
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
---
# Source: cilium/templates/hubble/metrics-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-metrics
  namespace: kube-system
  labels:
    k8s-app: hubble
    app.kubernetes.io/name: hubble
    app.kubernetes.io/part-of: cilium
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9965"
spec:
  clusterIP: None
  type: ClusterIP
  ports:
    - name: hubble-metrics
      port: 9965
      protocol: TCP
      targetPort: hubble-metrics
  selector:
    k8s-app: cilium
---
# Source: cilium/templates/hubble/peer-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: hubble-peer
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: hubble-peer
spec:
  selector:
    k8s-app: cilium
  ports:
    - name: peer-service
      port: 443
      protocol: TCP
      targetPort: 4244
  internalTrafficPolicy: Local
---
# Source: cilium/templates/cilium-agent/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium
  namespace: kube-system
  labels:
    k8s-app: cilium
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-agent
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9962"
        prometheus.io/scrape: "true"
      labels:
        k8s-app: cilium
        app.kubernetes.io/name: cilium-agent
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        appArmorProfile:
          type: Unconfined
      containers:
        - name: cilium-agent
          image: "quay.io/cilium/cilium:v1.16.0@sha256:46ffa4ef3cf6d8885dcc4af5963b0683f7d59daa90d49ed9fb68d3b1627fe058"
          imagePullPolicy: IfNotPresent
          command:
            - cilium-agent
          args:
            - --config-dir=/tmp/cilium/config-map
          startupProbe:
            httpGet:
              host: "127.0.0.1"
              path: /healthz
              port: 9879
              scheme: HTTP
              httpHeaders:
                - name: "brief"
                  value: "true"
            failureThreshold: 105
            periodSeconds: 2
            successThreshold: 1
            initialDelaySeconds: 5
          livenessProbe:
            httpGet:
              host: "127.0.0.1"
              path: /healthz
              port: 9879
              scheme: HTTP
              httpHeaders:
                - name: "brief"
                  value: "true"
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              host: "127.0.0.1"
              path: /healthz
              port: 9879
              scheme: HTTP
              httpHeaders:
                - name: "brief"
                  value: "true"
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 5
          env:
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: CILIUM_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: CILIUM_CLUSTERMESH_CONFIG
              value: /var/lib/cilium/clustermesh/
            - name: GOMEMLIMIT
              valueFrom:
                resourceFieldRef:
                  resource: limits.memory
                  divisor: "1"
            - name: KUBERNETES_SERVICE_HOST
              value: "localhost"
            - name: KUBERNETES_SERVICE_PORT
              value: "7445"
          lifecycle:
            postStart:
              exec:
                command:
                  - "bash"
                  - "-c"
                  - |
                    set -o errexit
                    set -o pipefail
                    set -o nounset

                    # When running in AWS ENI mode, it's likely that 'aws-node' has
                    # had a chance to install SNAT iptables rules. These can result
                    # in dropped traffic, so we should attempt to remove them.
                    # We do it using a 'postStart' hook since this may need to run
                    # for nodes which might have already been init'ed but may still
                    # have dangling rules. This is safe because there are no
                    # dependencies on anything that is part of the startup script
                    # itself, and can be safely run multiple times per node (e.g. in
                    # case of a restart).
                    if [[ "$(iptables-save | grep -E -c 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN')" != "0" ]];
                    then
                        echo 'Deleting iptables rules created by the AWS CNI VPC plugin'
                        iptables-save | grep -E -v 'AWS-SNAT-CHAIN|AWS-CONNMARK-CHAIN' | iptables-restore
                    fi
                    echo 'Done!'

            preStop:
              exec:
                command:
                  - /cni-uninstall.sh
          ports:
            - name: peer-service
              containerPort: 4244
              hostPort: 4244
              protocol: TCP
            - name: prometheus
              containerPort: 9962
              hostPort: 9962
              protocol: TCP
            - name: hubble-metrics
              containerPort: 9965
              hostPort: 9965
              protocol: TCP
          securityContext:
            seLinuxOptions:
              level: s0
              type: spc_t
            capabilities:
              add:
                - CHOWN
                - KILL
                - NET_ADMIN
                - NET_RAW
                - IPC_LOCK
                - SYS_ADMIN
                - SYS_RESOURCE
                - DAC_OVERRIDE
                - FOWNER
                - SETGID
                - SETUID
              drop:
                - ALL
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - name: envoy-sockets
              mountPath: /var/run/cilium/envoy/sockets
              readOnly: false
            # Unprivileged containers need to mount /proc/sys/net from the host
            # to have write access
            - mountPath: /host/proc/sys/net
              name: host-proc-sys-net
            # Unprivileged containers need to mount /proc/sys/kernel from the host
            # to have write access
            - mountPath: /host/proc/sys/kernel
              name: host-proc-sys-kernel
            - name: bpf-maps
              mountPath: /sys/fs/bpf
              # Unprivileged containers can't set mount propagation to bidirectional
              # in this case we will mount the bpf fs from an init container that
              # is privileged and set the mount propagation from host to container
              # in Cilium.
              mountPropagation: HostToContainer
            # Check for duplicate mounts before mounting
            - name: cilium-cgroup
              mountPath: /sys/fs/cgroup
            - name: cilium-run
              mountPath: /var/run/cilium
            - name: etc-cni-netd
              mountPath: /host/etc/cni/net.d
            - name: clustermesh-secrets
              mountPath: /var/lib/cilium/clustermesh
              readOnly: true
              # Needed to be able to load kernel modules
            - name: lib-modules
              mountPath: /lib/modules
              readOnly: true
            - name: xtables-lock
              mountPath: /run/xtables.lock
            - name: hubble-tls
              mountPath: /var/lib/cilium/tls/hubble
              readOnly: true
            - name: tmp
              mountPath: /tmp
      initContainers:
        - name: config
          image: "quay.io/cilium/cilium:v1.16.0@sha256:46ffa4ef3cf6d8885dcc4af5963b0683f7d59daa90d49ed9fb68d3b1627fe058"
          imagePullPolicy: IfNotPresent
          command:
            - cilium-dbg
            - build-config
          env:
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: CILIUM_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: KUBERNETES_SERVICE_HOST
              value: "localhost"
            - name: KUBERNETES_SERVICE_PORT
              value: "7445"
          volumeMounts:
            - name: tmp
              mountPath: /tmp
          terminationMessagePolicy: FallbackToLogsOnError
        - name: apply-sysctl-overwrites
          image: "quay.io/cilium/cilium:v1.16.0@sha256:46ffa4ef3cf6d8885dcc4af5963b0683f7d59daa90d49ed9fb68d3b1627fe058"
          imagePullPolicy: IfNotPresent
          env:
            - name: BIN_PATH
              value: /opt/cni/bin
          command:
            - sh
            - -ec
            # The statically linked Go program binary is invoked to avoid any
            # dependency on utilities like sh that can be missing on certain
            # distros installed on the underlying host. Copy the binary to the
            # same directory where we install cilium cni plugin so that exec permissions
            # are available.
            - |
              cp /usr/bin/cilium-sysctlfix /hostbin/cilium-sysctlfix;
              nsenter --mount=/hostproc/1/ns/mnt "${BIN_PATH}/cilium-sysctlfix";
              rm /hostbin/cilium-sysctlfix
          volumeMounts:
            - name: hostproc
              mountPath: /hostproc
            - name: cni-path
              mountPath: /hostbin
          terminationMessagePolicy: FallbackToLogsOnError
          securityContext:
            seLinuxOptions:
              level: s0
              type: spc_t
            capabilities:
              add:
                - SYS_ADMIN
                - SYS_CHROOT
                - SYS_PTRACE
              drop:
                - ALL
        # Mount the bpf fs if it is not mounted. We will perform this task
        # from a privileged container because the mount propagation bidirectional
        # only works from privileged containers.
        - name: mount-bpf-fs
          image: "quay.io/cilium/cilium:v1.16.0@sha256:46ffa4ef3cf6d8885dcc4af5963b0683f7d59daa90d49ed9fb68d3b1627fe058"
          imagePullPolicy: IfNotPresent
          args:
            - 'mount | grep "/sys/fs/bpf type bpf" || mount -t bpf bpf /sys/fs/bpf'
          command:
            - /bin/bash
            - -c
            - --
          terminationMessagePolicy: FallbackToLogsOnError
          securityContext:
            privileged: true
          volumeMounts:
            - name: bpf-maps
              mountPath: /sys/fs/bpf
              mountPropagation: Bidirectional
        - name: clean-cilium-state
          image: "quay.io/cilium/cilium:v1.16.0@sha256:46ffa4ef3cf6d8885dcc4af5963b0683f7d59daa90d49ed9fb68d3b1627fe058"
          imagePullPolicy: IfNotPresent
          command:
            - /init-container.sh
          env:
            - name: CILIUM_ALL_STATE
              valueFrom:
                configMapKeyRef:
                  name: cilium-config
                  key: clean-cilium-state
                  optional: true
            - name: CILIUM_BPF_STATE
              valueFrom:
                configMapKeyRef:
                  name: cilium-config
                  key: clean-cilium-bpf-state
                  optional: true
            - name: WRITE_CNI_CONF_WHEN_READY
              valueFrom:
                configMapKeyRef:
                  name: cilium-config
                  key: write-cni-conf-when-ready
                  optional: true
            - name: KUBERNETES_SERVICE_HOST
              value: "localhost"
            - name: KUBERNETES_SERVICE_PORT
              value: "7445"
          terminationMessagePolicy: FallbackToLogsOnError
          securityContext:
            seLinuxOptions:
              level: s0
              type: spc_t
            capabilities:
              add:
                - NET_ADMIN
                - SYS_ADMIN
                - SYS_RESOURCE
              drop:
                - ALL
          volumeMounts:
            - name: bpf-maps
              mountPath: /sys/fs/bpf
              # Required to mount cgroup filesystem from the host to cilium agent pod
            - name: cilium-cgroup
              mountPath: /sys/fs/cgroup
              mountPropagation: HostToContainer
            - name: cilium-run
              mountPath: /var/run/cilium # wait-for-kube-proxy
        # Install the CNI binaries in an InitContainer so we don't have a writable host mount in the agent
        - name: install-cni-binaries
          image: "quay.io/cilium/cilium:v1.16.0@sha256:46ffa4ef3cf6d8885dcc4af5963b0683f7d59daa90d49ed9fb68d3b1627fe058"
          imagePullPolicy: IfNotPresent
          command:
            - "/install-plugin.sh"
          resources:
            requests:
              cpu: 100m
              memory: 10Mi
          securityContext:
            seLinuxOptions:
              level: s0
              type: spc_t
            capabilities:
              drop:
                - ALL
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - name: cni-path
              mountPath: /host/opt/cni/bin # .Values.cni.install
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccountName: "cilium"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # For sharing configuration between the "config" initContainer and the agent
        - name: tmp
          emptyDir: {}
          # To keep state between restarts / upgrades
        - name: cilium-run
          hostPath:
            path: /var/run/cilium
            type: DirectoryOrCreate
          # To keep state between restarts / upgrades for bpf maps
        - name: bpf-maps
          hostPath:
            path: /sys/fs/bpf
            type: DirectoryOrCreate
        # To mount cgroup2 filesystem on the host or apply sysctlfix
        - name: hostproc
          hostPath:
            path: /proc
            type: Directory
        # To keep state between restarts / upgrades for cgroup2 filesystem
        - name: cilium-cgroup
          hostPath:
            path: /sys/fs/cgroup
            type: DirectoryOrCreate
        # To install cilium cni plugin in the host
        - name: cni-path
          hostPath:
            path: /opt/cni/bin
            type: DirectoryOrCreate
          # To install cilium cni configuration in the host
        - name: etc-cni-netd
          hostPath:
            path: /etc/cni/net.d
            type: DirectoryOrCreate
          # To be able to load kernel modules
        - name: lib-modules
          hostPath:
            path: /lib/modules
          # To access iptables concurrently with other processes (e.g. kube-proxy)
        - name: xtables-lock
          hostPath:
            path: /run/xtables.lock
            type: FileOrCreate
        # Sharing socket with Cilium Envoy on the same node by using a host path
        - name: envoy-sockets
          hostPath:
            path: "/var/run/cilium/envoy/sockets"
            type: DirectoryOrCreate
          # To read the clustermesh configuration
        - name: clustermesh-secrets
          projected:
            # note: the leading zero means this number is in octal representation: do not remove it
            defaultMode: 0400
            sources:
              - secret:
                  name: cilium-clustermesh
                  optional: true
                  # note: items are not explicitly listed here, since the entries of this secret
                  # depend on the peers configured, and that would cause a restart of all agents
                  # at every addition/removal. Leaving the field empty makes each secret entry
                  # to be automatically projected into the volume as a file whose name is the key.
              - secret:
                  name: clustermesh-apiserver-remote-cert
                  optional: true
                  items:
                    - key: tls.key
                      path: common-etcd-client.key
                    - key: tls.crt
                      path: common-etcd-client.crt
                    - key: ca.crt
                      path: common-etcd-client-ca.crt
              # note: we configure the volume for the kvstoremesh-specific certificate
              # regardless of whether KVStoreMesh is enabled or not, so that it can be
              # automatically mounted in case KVStoreMesh gets subsequently enabled,
              # without requiring an agent restart.
              - secret:
                  name: clustermesh-apiserver-local-cert
                  optional: true
                  items:
                    - key: tls.key
                      path: local-etcd-client.key
                    - key: tls.crt
                      path: local-etcd-client.crt
                    - key: ca.crt
                      path: local-etcd-client-ca.crt
        - name: host-proc-sys-net
          hostPath:
            path: /proc/sys/net
            type: Directory
        - name: host-proc-sys-kernel
          hostPath:
            path: /proc/sys/kernel
            type: Directory
        - name: hubble-tls
          projected:
            # note: the leading zero means this number is in octal representation: do not remove it
            defaultMode: 0400
            sources:
              - secret:
                  name: hubble-server-certs
                  optional: true
                  items:
                    - key: tls.crt
                      path: server.crt
                    - key: tls.key
                      path: server.key
                    - key: ca.crt
                      path: client-ca.crt
---
# Source: cilium/templates/cilium-envoy/daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: cilium-envoy
  namespace: kube-system
  labels:
    k8s-app: cilium-envoy
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-envoy
    name: cilium-envoy
spec:
  selector:
    matchLabels:
      k8s-app: cilium-envoy
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9964"
        prometheus.io/scrape: "true"
      labels:
        k8s-app: cilium-envoy
        name: cilium-envoy
        app.kubernetes.io/name: cilium-envoy
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        appArmorProfile:
          type: Unconfined
      containers:
        - name: cilium-envoy
          image: "quay.io/cilium/cilium-envoy:v1.29.7-39a2a56bbd5b3a591f69dbca51d3e30ef97e0e51@sha256:bd5ff8c66716080028f414ec1cb4f7dc66f40d2fb5a009fff187f4a9b90b566b"
          imagePullPolicy: IfNotPresent
          command:
            - /usr/bin/cilium-envoy-starter
          args:
            - "--"
            - "-c /var/run/cilium/envoy/bootstrap-config.json"
            - "--base-id 0"
            - "--log-level info"
            - "--log-format [%Y-%m-%d %T.%e][%t][%l][%n] [%g:%#] %v"
          startupProbe:
            httpGet:
              host: "127.0.0.1"
              path: /healthz
              port: 9878
              scheme: HTTP
            failureThreshold: 105
            periodSeconds: 2
            successThreshold: 1
            initialDelaySeconds: 5
          livenessProbe:
            httpGet:
              host: "127.0.0.1"
              path: /healthz
              port: 9878
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              host: "127.0.0.1"
              path: /healthz
              port: 9878
              scheme: HTTP
            periodSeconds: 30
            successThreshold: 1
            failureThreshold: 3
            timeoutSeconds: 5
          env:
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: CILIUM_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: KUBERNETES_SERVICE_HOST
              value: "localhost"
            - name: KUBERNETES_SERVICE_PORT
              value: "7445"
          ports:
            - name: envoy-metrics
              containerPort: 9964
              hostPort: 9964
              protocol: TCP
          securityContext:
            seLinuxOptions:
              level: s0
              type: spc_t
            capabilities:
              add:
                - NET_ADMIN
                - SYS_ADMIN
              drop:
                - ALL
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - name: envoy-sockets
              mountPath: /var/run/cilium/envoy/sockets
              readOnly: false
            - name: envoy-artifacts
              mountPath: /var/run/cilium/envoy/artifacts
              readOnly: true
            - name: envoy-config
              mountPath: /var/run/cilium/envoy/
              readOnly: true
            - name: bpf-maps
              mountPath: /sys/fs/bpf
              mountPropagation: HostToContainer
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccountName: "cilium-envoy"
      automountServiceAccountToken: true
      terminationGracePeriodSeconds: 1
      hostNetwork: true
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: cilium.io/no-schedule
                    operator: NotIn
                    values:
                      - "true"
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium
              topologyKey: kubernetes.io/hostname
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium-envoy
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        - name: envoy-sockets
          hostPath:
            path: "/var/run/cilium/envoy/sockets"
            type: DirectoryOrCreate
        - name: envoy-artifacts
          hostPath:
            path: "/var/run/cilium/envoy/artifacts"
            type: DirectoryOrCreate
        - name: envoy-config
          configMap:
            name: cilium-envoy-config
            # note: the leading zero means this number is in octal representation: do not remove it
            defaultMode: 0400
            items:
              - key: bootstrap-config.json
                path: bootstrap-config.json
          # To keep state between restarts / upgrades
          # To keep state between restarts / upgrades for bpf maps
        - name: bpf-maps
          hostPath:
            path: /sys/fs/bpf
            type: DirectoryOrCreate
---
# Source: cilium/templates/cilium-operator/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cilium-operator
  namespace: kube-system
  labels:
    io.cilium/app: operator
    name: cilium-operator
    app.kubernetes.io/part-of: cilium
    app.kubernetes.io/name: cilium-operator
spec:
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 2
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  # ensure operator update on single node k8s clusters, by using rolling update with maxUnavailable=100% in case
  # of one replica and no user configured Recreate strategy.
  # otherwise an update might get stuck due to the default maxUnavailable=50% in combination with the
  # podAntiAffinity which prevents deployments of multiple operator replicas on the same node.
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 50%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9963"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
        app.kubernetes.io/part-of: cilium
        app.kubernetes.io/name: cilium-operator
    spec:
      containers:
        - name: cilium-operator
          image: "quay.io/cilium/operator-generic:v1.16.0@sha256:d6621c11c4e4943bf2998af7febe05be5ed6fdcf812b27ad4388f47022190316"
          imagePullPolicy: IfNotPresent
          command:
            - cilium-operator-generic
          args:
            - --config-dir=/tmp/cilium/config-map
            - --debug=$(CILIUM_DEBUG)
          env:
            - name: K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: CILIUM_K8S_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: CILIUM_DEBUG
              valueFrom:
                configMapKeyRef:
                  key: debug
                  name: cilium-config
                  optional: true
            - name: KUBERNETES_SERVICE_HOST
              value: "localhost"
            - name: KUBERNETES_SERVICE_PORT
              value: "7445"
          ports:
            - name: prometheus
              containerPort: 9963
              hostPort: 9963
              protocol: TCP
          livenessProbe:
            httpGet:
              host: "127.0.0.1"
              path: /healthz
              port: 9234
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              host: "127.0.0.1"
              path: /healthz
              port: 9234
              scheme: HTTP
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 5
          volumeMounts:
            - name: cilium-config-path
              mountPath: /tmp/cilium/config-map
              readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccountName: "cilium-operator"
      automountServiceAccountToken: true
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  io.cilium/app: operator
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
        - operator: Exists
      volumes:
        # To read the configuration from the config map
        - name: cilium-config-path
          configMap:
            name: cilium-config
---
# Source: cilium/templates/hubble-relay/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
    app.kubernetes.io/name: hubble-relay
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-relay
        app.kubernetes.io/name: hubble-relay
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 65532
      containers:
        - name: hubble-relay
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsGroup: 65532
            runAsNonRoot: true
            runAsUser: 65532
          image: "quay.io/cilium/hubble-relay:v1.16.0@sha256:33fca7776fc3d7b2abe08873319353806dc1c5e07e12011d7da4da05f836ce8d"
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 3
          # livenessProbe will kill the pod, we should be very conservative
          # here on failures since killing the pod should be a last resort, and
          # we should provide enough time for relay to retry before killing it.
          livenessProbe:
            grpc:
              port: 4222
            timeoutSeconds: 10
            # Give relay time to establish connections and make a few retries
            # before starting livenessProbes.
            initialDelaySeconds: 10
            # 10 second * 12 failures = 2 minutes of failure.
            # If relay cannot become healthy after 2 minutes, then killing it
            # might resolve whatever issue is occurring.
            #
            # 10 seconds is a reasonable retry period so we can see if it's
            # failing regularly or only sporadically.
            periodSeconds: 10
            failureThreshold: 12
          startupProbe:
            grpc:
              port: 4222
            # Give relay time to get it's certs and establish connections and
            # make a few retries before starting startupProbes.
            initialDelaySeconds: 10
            # 20 * 3 seconds = 1 minute of failure before we consider startup as failed.
            failureThreshold: 20
            # Retry more frequently at startup so that it can be considered started more quickly.
            periodSeconds: 3
          volumeMounts:
            - name: config
              mountPath: /etc/hubble-relay
              readOnly: true
            - name: tls
              mountPath: /var/lib/hubble-relay/tls
              readOnly: true
          terminationMessagePolicy: FallbackToLogsOnError

      restartPolicy: Always
      priorityClassName:
      serviceAccountName: "hubble-relay"
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 1
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  k8s-app: cilium
              topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
        - name: config
          configMap:
            name: hubble-relay-config
            items:
              - key: config.yaml
                path: config.yaml
        - name: tls
          projected:
            # note: the leading zero means this number is in octal representation: do not remove it
            defaultMode: 0400
            sources:
              - secret:
                  name: hubble-relay-client-certs
                  items:
                    - key: tls.crt
                      path: client.crt
                    - key: tls.key
                      path: client.key
                    - key: ca.crt
                      path: hubble-server-ca.crt
---
# Source: cilium/templates/hubble-ui/deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  name: hubble-ui
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
    app.kubernetes.io/name: hubble-ui
    app.kubernetes.io/part-of: cilium
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
      labels:
        k8s-app: hubble-ui
        app.kubernetes.io/name: hubble-ui
        app.kubernetes.io/part-of: cilium
    spec:
      securityContext:
        fsGroup: 1001
        runAsGroup: 1001
        runAsUser: 1001
      priorityClassName:
      serviceAccountName: "hubble-ui"
      automountServiceAccountToken: true
      containers:
        - name: frontend
          image: "quay.io/cilium/hubble-ui:v0.13.1@sha256:e2e9313eb7caf64b0061d9da0efbdad59c6c461f6ca1752768942bfeda0796c6"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8081
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8081
          readinessProbe:
            httpGet:
              path: /
              port: 8081
          volumeMounts:
            - name: hubble-ui-nginx-conf
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: nginx.conf
            - name: tmp-dir
              mountPath: /tmp
          terminationMessagePolicy: FallbackToLogsOnError
        - name: backend
          image: "quay.io/cilium/hubble-ui-backend:v0.13.1@sha256:0e0eed917653441fded4e7cdb096b7be6a3bddded5a2dd10812a27b1fc6ed95b"
          imagePullPolicy: IfNotPresent
          env:
            - name: EVENTS_SERVER_PORT
              value: "8090"
            - name: FLOWS_API_ADDR
              value: "hubble-relay:80"
          ports:
            - name: grpc
              containerPort: 8090
          volumeMounts:
          terminationMessagePolicy: FallbackToLogsOnError
      nodeSelector:
        kubernetes.io/os: linux
      volumes:
        - configMap:
            defaultMode: 420
            name: hubble-ui-nginx
          name: hubble-ui-nginx-conf
        - emptyDir: {}
          name: tmp-dir
